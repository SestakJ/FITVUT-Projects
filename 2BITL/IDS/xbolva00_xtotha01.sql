--- Zadanie: Hotel
--- David Bolvansky (xbolva00), Adrian Toth (xtotha01)


--- drop ---
DROP TABLE klient CASCADE CONSTRAINTS;
DROP TABLE pobyt CASCADE CONSTRAINTS;
DROP TABLE platba CASCADE CONSTRAINTS;
DROP TABLE zamestnanec CASCADE CONSTRAINTS;
DROP TABLE zamestnanec_na_dobu_urcitu CASCADE CONSTRAINTS;
DROP TABLE trvaly_zamestnanec CASCADE CONSTRAINTS;
DROP TABLE zlava CASCADE CONSTRAINTS;
DROP TABLE izba CASCADE CONSTRAINTS;
DROP TABLE sluzba CASCADE CONSTRAINTS;
DROP TABLE sluzba_izba CASCADE CONSTRAINTS;
DROP TABLE sluzba_pobyt CASCADE CONSTRAINTS;
DROP TABLE pobyt_izba CASCADE CONSTRAINTS;
DROP SEQUENCE cislo_izby;
DROP TRIGGER auto_inkrementacia_cisla_izby;
DROP TRIGGER prevod_na_eura;
DROP TRIGGER kontrola_rodneho_cisla_klienta;
DROP PROCEDURE zastupenie_mesta_v_klientele;
DROP PROCEDURE kontrola_emailov_zamestnancov;
DROP PROCEDURE volne_izby_podla_kapacity;
DROP MATERIALIZED VIEW  pohlad_klient_pobyt;
DROP INDEX index_platba_suma;

--- create tables ---
CREATE TABLE klient (
	id_klienta integer GENERATED BY DEFAULT AS IDENTITY (START WITH 1  INCREMENT BY 1) NOT NULL,
	meno varchar2(50) NOT NULL,
	priezvisko varchar2(50) NOT NULL,
	mesto varchar2(50) NOT NULL,
	ulica varchar2(50),
	cislo_domu integer NOT NULL,
	stat varchar2(50) NOT NULL,
	psc integer NOT NULL,
	datum_narodenia timestamp NOT NULL,
	rodne_cislo integer NOT NULL,
	telefonne_cislo varchar2(13) NOT NULL,
	email varchar2(50) NOT NULL
);

CREATE TABLE pobyt (
	id_pobytu integer GENERATED BY DEFAULT AS IDENTITY (START WITH 1  INCREMENT BY 1) NOT NULL,
	datum_rezervovania_od timestamp,
	datum_rezervovania_do timestamp,
	datum_ubytovania_od timestamp NOT NULL,
	datum_ubytovania_do timestamp NOT NULL,
	pocet_osob integer NOT NULL,
	id_klienta integer NOT NULL,
	id_platby integer NOT NULL,
	id_zamestnanca integer
);

CREATE TABLE platba (
	id_platby integer GENERATED BY DEFAULT AS IDENTITY (START WITH 1  INCREMENT BY 1) NOT NULL,
	suma integer NOT NULL,
	datum_platby timestamp NOT NULL,
	cas_platby timestamp NOT NULL,
	sposob_platby integer NOT NULL,
	cislo_uctu varchar2(24),
	id_klienta integer NOT NULL,
	id_zamestnanca integer NOT NULL
);

CREATE TABLE zamestnanec (
	id_zamestnanca integer GENERATED BY DEFAULT AS IDENTITY (START WITH 1  INCREMENT BY 1) NOT NULL,
	meno varchar2(50) NOT NULL,
	priezvisko varchar2(50) NOT NULL,
	titul varchar2(50),
	mesto varchar2(50) NOT NULL,
	ulica varchar2(50),
	cislo_domu integer NOT NULL,
	psc integer NOT NULL,
	datum_narodenia timestamp NOT NULL,
	rodne_cislo integer NOT NULL,
	telefonne_cislo varchar2(13) NOT NULL,
	email varchar2(50) NOT NULL,
	cislo_uctu varchar2(24) NOT NULL
);

CREATE TABLE zamestnanec_na_dobu_urcitu (
	id_zamestnanca integer GENERATED BY DEFAULT AS IDENTITY (START WITH 1  INCREMENT BY 1) NOT NULL,
	pracovna_zmluva_od timestamp NOT NULL,
	pracovna_zmluva_do timestamp NOT NULL
);

CREATE TABLE trvaly_zamestnanec (
	id_zamestnanca integer GENERATED BY DEFAULT AS IDENTITY (START WITH 1  INCREMENT BY 1) NOT NULL,
	datum_prijatia timestamp NOT NULL
);

CREATE TABLE zlava (
	id_zlavy integer GENERATED BY DEFAULT AS IDENTITY (START WITH 1  INCREMENT BY 1) NOT NULL,
	rezervacna_zlava integer NOT NULL,
	sezonna_zlava integer NOT NULL
);

CREATE TABLE izba (
	cislo_izby integer GENERATED BY DEFAULT AS IDENTITY (START WITH 100  INCREMENT BY 1) NOT NULL,
	kapacita integer NOT NULL,
	pocet_miestnosti integer NOT NULL,
	dostupnost integer NOT NULL,
	cena integer NOT NULL,
	id_zlavy integer NOT NULL
);

CREATE TABLE sluzba (
	id_sluzby integer GENERATED BY DEFAULT AS IDENTITY (START WITH 1  INCREMENT BY 1) NOT NULL,
	nazov varchar2(50) NOT NULL,
	typ integer NOT NULL,
	cena integer NOT NULL
);

CREATE TABLE sluzba_izba (
	id_sluzby integer GENERATED BY DEFAULT AS IDENTITY (START WITH 1  INCREMENT BY 1) NOT NULL,
	cislo_izby integer NOT NULL,
	vykonava_od timestamp NOT NULL,
	vykonava_do timestamp NOT NULL
);

CREATE TABLE sluzba_pobyt (
	id_sluzby integer NOT NULL,
	id_pobytu integer NOT NULL
);

CREATE TABLE pobyt_izba (
	id_pobytu integer NOT NULL,
	cislo_izby integer NOT NULL
);

--- set primary keys ---
ALTER TABLE klient ADD CONSTRAINT pk_id_klienta PRIMARY KEY(id_klienta);
ALTER TABLE pobyt ADD CONSTRAINT pk_id_pobytu PRIMARY KEY(id_pobytu);
ALTER TABLE platba ADD CONSTRAINT pk_id_platby PRIMARY KEY(id_platby);
ALTER TABLE zamestnanec ADD CONSTRAINT pk_id_zamestnanca PRIMARY KEY(id_zamestnanca);

ALTER TABLE zamestnanec_na_dobu_urcitu ADD CONSTRAINT pk_id_zamestnanca_2 PRIMARY KEY(id_zamestnanca);
ALTER TABLE trvaly_zamestnanec ADD CONSTRAINT pk_id_zamestnanca_3 PRIMARY KEY(id_zamestnanca);

ALTER TABLE zlava ADD CONSTRAINT pk_id_zlavy PRIMARY KEY(id_zlavy);
ALTER TABLE izba ADD CONSTRAINT pk_cislo_izby PRIMARY KEY(cislo_izby);
ALTER TABLE sluzba ADD CONSTRAINT pk_id_sluzby PRIMARY KEY(id_sluzby);

--- set composite primary keys ---
ALTER TABLE sluzba_izba ADD CONSTRAINT pk_id_sluzby_cislo_izby PRIMARY KEY (id_sluzby, cislo_izby);
ALTER TABLE sluzba_pobyt ADD CONSTRAINT pk_id_sluzby_id_pobytu PRIMARY KEY (id_sluzby, id_pobytu);
ALTER TABLE pobyt_izba ADD CONSTRAINT pk_id_pobytu_cislo_izby PRIMARY KEY (id_pobytu, cislo_izby);

--- set foreign keys ---
ALTER TABLE sluzba_izba ADD CONSTRAINT fk_id_sluzby FOREIGN KEY (id_sluzby) REFERENCES sluzba(id_sluzby);
ALTER TABLE sluzba_izba ADD CONSTRAINT fk_cislo_izby FOREIGN KEY (cislo_izby) REFERENCES izba(cislo_izby);

ALTER TABLE sluzba_pobyt ADD CONSTRAINT fk_id_sluzby_2 FOREIGN KEY (id_sluzby) REFERENCES sluzba(id_sluzby);
ALTER TABLE sluzba_pobyt ADD CONSTRAINT fk_id_pobytu FOREIGN KEY (id_pobytu) REFERENCES pobyt(id_pobytu);

ALTER TABLE pobyt_izba ADD CONSTRAINT fk_id_pobytu_2 FOREIGN KEY (id_pobytu) REFERENCES pobyt(id_pobytu);
ALTER TABLE pobyt_izba ADD CONSTRAINT fk_cislo_izby_2 FOREIGN KEY (cislo_izby) REFERENCES izba(cislo_izby);

ALTER TABLE zamestnanec_na_dobu_urcitu ADD CONSTRAINT fk_id_zamestnanca FOREIGN KEY (id_zamestnanca) REFERENCES zamestnanec(id_zamestnanca);
ALTER TABLE trvaly_zamestnanec ADD CONSTRAINT fk_id_zamestnanca_2 FOREIGN KEY (id_zamestnanca) REFERENCES zamestnanec(id_zamestnanca);

ALTER TABLE platba ADD CONSTRAINT fk_id_zamestnanca_3 FOREIGN KEY (id_zamestnanca) REFERENCES zamestnanec(id_zamestnanca);
ALTER TABLE platba ADD CONSTRAINT fk_id_klienta FOREIGN KEY (id_klienta) REFERENCES klient(id_klienta);

ALTER TABLE pobyt ADD CONSTRAINT fk_id_zamestnanca_4 FOREIGN KEY (id_zamestnanca) REFERENCES zamestnanec(id_zamestnanca);
ALTER TABLE pobyt ADD CONSTRAINT fk_id_klienta_2 FOREIGN KEY (id_klienta) REFERENCES klient(id_klienta);
ALTER TABLE pobyt ADD CONSTRAINT fk_id_platby FOREIGN KEY (id_platby) REFERENCES platba(id_platby);

ALTER TABLE izba ADD CONSTRAINT fk_id_zlavy FOREIGN KEY (id_zlavy) REFERENCES zlava(id_zlavy);

--- set constraints ---
ALTER TABLE izba ADD CONSTRAINT ch_cena CHECK (cena > 0);
ALTER TABLE pobyt ADD CONSTRAINT ch_pocet_osob CHECK (pocet_osob > 0);
ALTER TABLE platba ADD CONSTRAINT ch_cislo_uct_platby CHECK (LENGTH(cislo_uctu) = 24);
ALTER TABLE zamestnanec ADD CONSTRAINT ch_cislo_uctu_zamestnanca CHECK (LENGTH(cislo_uctu) = 24);

ALTER TABLE zamestnanec ADD CONSTRAINT ch_telefonne_cislo_zamestnanca CHECK (LENGTH(telefonne_cislo) = 13);
ALTER TABLE klient ADD CONSTRAINT ch_telefonne_cislo_klienta CHECK (LENGTH(telefonne_cislo) = 13);

--- insert values ---
INSERT INTO klient(meno, priezvisko, mesto, ulica, cislo_domu, stat, psc, datum_narodenia, rodne_cislo, telefonne_cislo, email) VALUES('Jan','Novak', ' Brno', 'Purkynova', 27, 'Ceska republika', 61200, TO_TIMESTAMP('10-05-1986', 'DD-MM-YYYY'), 8605102528, '+420975684755', 'jan.novak@seznam.cz');
INSERT INTO klient(meno, priezvisko, mesto, ulica, cislo_domu, stat, psc, datum_narodenia, rodne_cislo, telefonne_cislo, email) VALUES('Petr','Franko', ' Praha', 'Hlavni', 42, 'Ceska republika', 14100, TO_TIMESTAMP('03-09-1980', 'DD-MM-YYYY'), 8009036475, '+420971855653', 'frankopetr@google.com');
INSERT INTO klient(meno, priezvisko, mesto, ulica, cislo_domu, stat, psc, datum_narodenia, rodne_cislo, telefonne_cislo, email) VALUES('Jana','Frankova', ' Praha', 'Hlavni', 42, 'Ceska republika', 14100, TO_TIMESTAMP('21-08-1984', 'DD-MM-YYYY'), 8408213616, '+420653244156', 'jankafrankova@google.com');
INSERT INTO klient(meno, priezvisko, mesto, ulica, cislo_domu, stat, psc, datum_narodenia, rodne_cislo, telefonne_cislo, email) VALUES('Katerina','Mala', ' Olomouc', 'Polska', 13, 'Ceska republika', 77900, TO_TIMESTAMP('25-02-1988', 'DD-MM-YYYY'), 8802259576, '+420657877459', 'katerina.mala@outlook.com');

INSERT INTO zamestnanec(meno, priezvisko, titul, mesto, ulica, cislo_domu, psc, datum_narodenia, rodne_cislo, telefonne_cislo, email, cislo_uctu) VALUES('Filip','Dula', 'Ing.', 'Brno', 'Purkynova', 25, 60200, TO_TIMESTAMP('02-08-1987', 'DD-MM-YYYY'), 9708026119, '+420985677113', 'filip.dula@gmail.com', 'CZ2145563556213524563664');
INSERT INTO zamestnanec(meno, priezvisko, titul, mesto, ulica, cislo_domu, psc, datum_narodenia, rodne_cislo, telefonne_cislo, email, cislo_uctu) VALUES('Richard','Mraz', NULL, 'Brno', 'Nerudova', 12, 60200, TO_TIMESTAMP('27-06-1986', 'DD-MM-YYYY'), 8606276536, '+420322651428', 'mraz.richard@gmail.com', 'CZ2145563556213524563664');
INSERT INTO zamestnanec(meno, priezvisko, titul, mesto, ulica, cislo_domu, psc, datum_narodenia, rodne_cislo, telefonne_cislo, email, cislo_uctu) VALUES('Petr','Kral', 'Ing.', 'Brno', 'Purkynova', 64, 61200, TO_TIMESTAMP('14-05-1983', 'DD-MM-YYYY'), 8305147785, '+420567845943', 'petr.kral@gmail.com', 'CZ1489963546214523562544');
INSERT INTO zamestnanec(meno, priezvisko, titul, mesto, ulica, cislo_domu, psc, datum_narodenia, rodne_cislo, telefonne_cislo, email, cislo_uctu) VALUES('Eliska','Fernerova', 'Mgr.', 'Brno', 'Minska', 75, 61600, TO_TIMESTAMP('27-06-1988', 'DD-MM-YYYY'), 8806276985, '+420156211457', 'fernerovaeliska@gmail.com', 'CZ1578445678321564872214');

INSERT INTO trvaly_zamestnanec VALUES(1, TO_TIMESTAMP('01-07-2008', 'DD-MM-YYYY'));
INSERT INTO trvaly_zamestnanec VALUES(3, TO_TIMESTAMP('01-01-2010', 'DD-MM-YYYY'));

INSERT INTO zamestnanec_na_dobu_urcitu VALUES(2, TO_TIMESTAMP('01-01-2017', 'DD-MM-YYYY'), TO_TIMESTAMP('01-05-2017', 'DD-MM-YYYY'));
INSERT INTO zamestnanec_na_dobu_urcitu VALUES(4, TO_TIMESTAMP('01-07-2017', 'DD-MM-YYYY'), TO_TIMESTAMP('01-09-2017', 'DD-MM-YYYY'));

INSERT INTO platba(suma, datum_platby, cas_platby, sposob_platby, cislo_uctu, id_klienta, id_zamestnanca) VALUES(1350, TO_TIMESTAMP('10-03-2017', 'DD-MM-YYYY'), TO_TIMESTAMP('14:26', 'HH24:MI'), 1, 'CZ2465432568942531254521', 4, 2);
INSERT INTO platba(suma, datum_platby, cas_platby, sposob_platby, cislo_uctu, id_klienta, id_zamestnanca) VALUES(1450, TO_TIMESTAMP('11-03-2017', 'DD-MM-YYYY'), TO_TIMESTAMP('15:10', 'HH24:MI'), 2, NULL, 1, 3);
INSERT INTO platba(suma, datum_platby, cas_platby, sposob_platby, cislo_uctu, id_klienta, id_zamestnanca) VALUES(1250, TO_TIMESTAMP('18-03-2017', 'DD-MM-YYYY'), TO_TIMESTAMP('10:25', 'HH24:MI'), 1, 'CZ2452642516413652445614', 3, 2);
INSERT INTO platba(suma, datum_platby, cas_platby, sposob_platby, cislo_uctu, id_klienta, id_zamestnanca) VALUES(1750, TO_TIMESTAMP('24-03-2017', 'DD-MM-YYYY'), TO_TIMESTAMP('16:44', 'HH24:MI'), 2, NULL, 1, 1);

INSERT INTO pobyt(datum_rezervovania_od, datum_rezervovania_do, datum_ubytovania_od, datum_ubytovania_do, pocet_osob, id_klienta, id_platby, id_zamestnanca) VALUES(NULL, NULL, TO_TIMESTAMP('02-03-2017', 'DD-MM-YYYY'), TO_TIMESTAMP('05-03-2017', 'DD-MM-YYYY'), 3, 2, 1, 3);
INSERT INTO pobyt(datum_rezervovania_od, datum_rezervovania_do, datum_ubytovania_od, datum_ubytovania_do, pocet_osob, id_klienta, id_platby, id_zamestnanca) VALUES(TO_TIMESTAMP('04-03-2017', 'DD-MM-YYYY'), TO_TIMESTAMP('04-03-2017', 'DD-MM-YYYY'), TO_TIMESTAMP('04-03-2017', 'DD-MM-YYYY'), TO_TIMESTAMP('09-03-2017', 'DD-MM-YYYY'), 2, 2, 2, NULL);
INSERT INTO pobyt(datum_rezervovania_od, datum_rezervovania_do, datum_ubytovania_od, datum_ubytovania_do, pocet_osob, id_klienta, id_platby, id_zamestnanca) VALUES(NULL, NULL, TO_TIMESTAMP('18-03-2017', 'DD-MM-YYYY'), TO_TIMESTAMP('24-03-2017', 'DD-MM-YYYY'), 3, 1, 3, NULL);
INSERT INTO pobyt(datum_rezervovania_od, datum_rezervovania_do, datum_ubytovania_od, datum_ubytovania_do, pocet_osob, id_klienta, id_platby, id_zamestnanca) VALUES(TO_TIMESTAMP('05-03-2017', 'DD-MM-YYYY'), TO_TIMESTAMP('12-03-2017', 'DD-MM-YYYY'), TO_TIMESTAMP('05-03-2017', 'DD-MM-YYYY'), TO_TIMESTAMP('12-03-2017', 'DD-MM-YYYY'), 1, 4, 4, 1);

INSERT INTO sluzba(nazov, typ, cena) VALUES('Masaz', 2, 200);
INSERT INTO sluzba(nazov, typ, cena) VALUES('Kozmetika', 2, 150);
INSERT INTO sluzba(nazov, typ, cena) VALUES('Baby sitting', 1, 300);
INSERT INTO sluzba(nazov, typ, cena) VALUES('Bazen', 4, 150);

INSERT INTO zlava(rezervacna_zlava, sezonna_zlava) VALUES(1, 0);
INSERT INTO zlava(rezervacna_zlava, sezonna_zlava) VALUES(0, 0);
INSERT INTO zlava(rezervacna_zlava, sezonna_zlava) VALUES(1, 1);
INSERT INTO zlava(rezervacna_zlava, sezonna_zlava) VALUES(0, 1);

INSERT INTO izba(kapacita, pocet_miestnosti, dostupnost, cena, id_zlavy) VALUES(4, 4, 0, 650, 1);
INSERT INTO izba(kapacita, pocet_miestnosti, dostupnost, cena, id_zlavy) VALUES(2, 3, 1, 550, 2);
INSERT INTO izba(kapacita, pocet_miestnosti, dostupnost, cena, id_zlavy) VALUES(3, 3, 0, 600, 3);
INSERT INTO izba(kapacita, pocet_miestnosti, dostupnost, cena, id_zlavy) VALUES(2, 2, 1, 400, 2);
INSERT INTO izba(kapacita, pocet_miestnosti, dostupnost, cena, id_zlavy) VALUES(4, 3, 0, 500, 1);
INSERT INTO izba(kapacita, pocet_miestnosti, dostupnost, cena, id_zlavy) VALUES(3, 3, 1, 450, 2);
INSERT INTO izba VALUES(1000, 50, 1, 0, 150, 1); --- specialna miestnost: bazen ---

INSERT INTO sluzba_izba VALUES(1, 101, TO_TIMESTAMP('08-02-2017', 'DD-MM-YYYY'), TO_TIMESTAMP('12-02-2017', 'DD-MM-YYYY'));
INSERT INTO sluzba_izba VALUES(2, 102, TO_TIMESTAMP('21-02-2017', 'DD-MM-YYYY'), TO_TIMESTAMP('28-02-2017', 'DD-MM-YYYY'));
INSERT INTO sluzba_izba VALUES(4, 1000, TO_TIMESTAMP('11-02-2017', 'DD-MM-YYYY'), TO_TIMESTAMP('13-02-2017', 'DD-MM-YYYY'));

INSERT INTO sluzba_pobyt VALUES(1, 1);
INSERT INTO sluzba_pobyt VALUES(2, 2);
INSERT INTO sluzba_pobyt VALUES(3, 4);

INSERT INTO pobyt_izba VALUES(2, 101);
INSERT INTO pobyt_izba VALUES(2, 103);
INSERT INTO pobyt_izba VALUES(1, 100);
INSERT INTO pobyt_izba VALUES(4, 102);

--- Vypise volne (dostupne izby)
SELECT I.cislo_izby FROM izba I WHERE I.dostupnost = 1;

--- Vypise meno a priezvisko klientov, ktori si rezervovali pobyt pre 3 osoby
SELECT K.meno, K.priezvisko FROM klient K NATURAL JOIN pobyt WHERE pobyt.pocet_osob = 3;

--- Vypise rodne cisla klientov, ktory za pobyt zaplatili viac ako 1400 Kc
SELECT K.rodne_cislo FROM klient K INNER JOIN platba P ON K.id_klienta = P.id_klienta AND P.suma > 1400;

--- Vypise datumy platieb (za pobyty), ktore evidoval zamestnanec Richard Mraz
SELECT P.datum_platby FROM zamestnanec Z, platba P WHERE Z.id_zamestnanca = P.id_zamestnanca AND Z.meno = 'Richard' AND Z.priezvisko = 'Mraz';

--- Vypise zamestnancov na dobu urcitu a datum, dokedy maju platnu pracovnu zmluvu
SELECT Z.meno, Z.priezvisko, ZDU.pracovna_zmluva_do FROM zamestnanec_na_dobu_urcitu ZDU, zamestnanec Z WHERE ZDU.id_zamestnanca = Z.id_zamestnanca;

--- Vypise klientov, ktory vyuzili sluzbu Masaz
SELECT K.meno, K.priezvisko FROM pobyt P INNER JOIN sluzba_pobyt SP on P.id_pobytu = SP.id_pobytu INNER JOIN Klient K ON P.id_klienta = K.id_klienta INNER JOIN sluzba S ON SP.id_sluzby = S.id_sluzby WHERE S.nazov = 'Masaz';

--- Vypise celkovy pocet platieb od klienta Jana Novaka a zaroven aj jeho najvyssiu platbu za pobyt
SELECT COUNT(P.suma), MAX(P.suma) FROM klient K, platba P WHERE K.id_klienta = P.id_klienta AND K.meno = 'Jan' AND K.priezvisko = 'Novak';

--- Vypise sumy vsetkych platieb jednotlivych klientov
SELECT K.meno, K.priezvisko, SUM(P.suma)  FROM klient K, platba P WHERE K.id_klienta = P.id_klienta GROUP BY K.meno, K.priezvisko;

--- Vypise rodne cisla zamestnancov, ktory vytvorili pobyty klienta Petra Franka
SELECT Z.rodne_cislo FROM zamestnanec Z, pobyt P, klient K WHERE P.id_zamestnanca = Z.id_zamestnanca AND P.id_klienta = K.id_klienta AND K.meno = 'Petr' AND K.priezvisko = 'Franko';

-- Vypise pocet pobytov jednotlivych klientov
SELECT K.meno, K.priezvisko, COUNT(*) FROM pobyt P, klient K WHERE P.id_klienta = K.id_klienta GROUP BY K.meno, K.priezvisko;

--- Vypise vsetkych zamestnancov, ktori doteraz zaevidovali nejaku platbu
SELECT Z.meno, Z.priezvisko FROM zamestnanec Z WHERE EXISTS (SELECT P.id_zamestnanca FROM platba P WHERE P.id_zamestnanca = Z.id_zamestnanca);

--- Vypise izby, na ktorych uz bol nejaky pobyt no momentalne su (volne) dostupne
SELECT I.cislo_izby FROM izba I WHERE I.cislo_izby IN (SELECT PI.cislo_izby FROM pobyt_izba PI WHERE PI.cislo_izby = I.cislo_izby) AND I.dostupnost = 1;


--- Pokrocile databazove objekty
SET serveroutput ON;

--- Trigger na auto inkrementaciu cisel izieb ako primarnych klucov pri vkladani do tabulky
CREATE SEQUENCE cislo_izby START WITH 200 INCREMENT BY 1;
CREATE OR REPLACE TRIGGER auto_inkrementacia_cisla_izby
  BEFORE INSERT ON izba
  FOR EACH ROW
BEGIN
  :NEW.cislo_izby := cislo_izby.nextval;
END;
/

--- ukazka funkcnosti triggeru
INSERT INTO izba(kapacita, pocet_miestnosti, dostupnost, cena, id_zlavy) VALUES(4, 4, 0, 650, 1);
INSERT INTO izba(kapacita, pocet_miestnosti, dostupnost, cena, id_zlavy) VALUES(4, 3, 0, 750, 1);

--- izby od cisla 200
SELECT * FROM izba WHERE izba.cislo_izby >= 200 AND izba.cislo_izby <= 210;


--- Trigger na prevod sumy v CZK na eura
CREATE OR REPLACE TRIGGER prevod_na_eura
  BEFORE INSERT ON platba
  FOR EACH ROW
BEGIN
    :NEW.suma := :NEW.suma / 27;
END;
/

INSERT INTO platba(suma, datum_platby, cas_platby, sposob_platby, cislo_uctu, id_klienta, id_zamestnanca) VALUES(1800, TO_TIMESTAMP('20-04-2017', 'DD-MM-YYYY'), TO_TIMESTAMP('12:48', 'HH24:MI'), 3, NULL, 2, 1);

--- ukazka prevedenej sumy
SELECT platba.id_platby, platba.suma AS SUMA_V_EURACH FROM platba WHERE platba.id_platby = 5;


--- Trigger na kontrolu rodneho cisla u klientov
CREATE OR REPLACE TRIGGER kontrola_rodneho_cisla_klienta
	BEFORE INSERT OR UPDATE OF rodne_cislo ON klient
  FOR EACH ROW
DECLARE
  rodne_cislo klient.rodne_cislo%TYPE;
  den VARCHAR2(2);
  mesiac VARCHAR2(2);
  rok VARCHAR2(2);
BEGIN
   rodne_cislo := :NEW.rodne_cislo;

   if (LENGTH(rodne_cislo) < 9 OR LENGTH(rodne_cislo) > 10)
      THEN raise_application_error(-20001, 'Nespravny pocet cislic v rodnom cisle');
   END IF;

   if (LENGTH(rodne_cislo) = 9 AND SUBSTR(rodne_cislo, 7, 3) = '000')
      THEN raise_application_error(-20001, 'Nespravna koncovka 000 v rodnom cisle');
   END IF;

   if (MOD(rodne_cislo, 11) != 0)
       THEN raise_application_error(-20002, 'Nespravne rodne cislo, nie je delitelne 11');
   END IF;

   rok := SUBSTR(rodne_cislo, 1, 2);
   mesiac := SUBSTR(rodne_cislo, 3, 2);
   den := SUBSTR(rodne_cislo, 5, 2);

   if (rok < 0 OR rok > 99)
       THEN raise_application_error(-20003, 'Neplatny datum v rodnom cisle');
   END IF;

   if (mesiac > 50)
       THEN
          mesiac := mesiac - 50;
   ELSE
       if (mesiac > 20)
       THEN
          mesiac := mesiac - 20;
       END IF;
   END IF;

   if (mesiac <= 0 OR mesiac > 12)
       THEN raise_application_error(-20003, 'Neplatny datum v rodnom cisle');
   END IF;

   if (den <= 0)
       THEN raise_application_error(-20003, 'Neplatny datum v rodnom cisle');
   END IF;

   if (den > 40)
       THEN
          den := den - 40;
   END IF;

   if (mesiac = 2 AND MOD(rok, 4) = 0 AND (den > 29))
      THEN raise_application_error(-20003, 'Neplatny datum  v rodnom cisle');
   END IF;

   if (mesiac = 2 AND MOD(rok, 4) != 0 AND (den > 28))
      THEN raise_application_error(-20003, 'Neplatny datum  v rodnom cisle');
   END IF;

   if ((mesiac = 1 OR mesiac = 3 OR mesiac = 5 OR mesiac = 7 OR mesiac = 8 OR mesiac = 10 OR mesiac = 12) AND den > 31)
       THEN raise_application_error(-20003, 'Neplatny datum  v rodnom cisle');
   END IF;

   if ((mesiac = 4 OR mesiac = 6 OR mesiac = 9 OR mesiac = 11) AND den > 30)
       THEN raise_application_error(-20003, 'Neplatny datum v rodnom cisle');
   END IF;
END;
/

--- Test kontroly rodneho cisla
--- Nasledujuci insert vyhodi appplication error kvoli chybe v rodnom cisle
--- INSERT INTO klient(meno, priezvisko, mesto, ulica, cislo_domu, stat, psc, datum_narodenia, rodne_cislo, telefonne_cislo, email) VALUES('Jan','Novak', ' Brno', 'Purkynova', 27, 'Ceska republika', 61200, TO_TIMESTAMP('10-01-1986', 'DD-MM-YYYY'), 8613102526, '+420975684755', 'jan.novak@seznam.cz');


CREATE OR REPLACE PROCEDURE zastupenie_mesta_v_klientele(mesto IN VARCHAR2)
IS
   CURSOR klienti IS SELECT * FROM klient;
   zaznam klienti%ROWTYPE;
   pocet_vsetkych NUMBER;
   pocet_mesto NUMBER;
BEGIN
  pocet_vsetkych := 0;
  pocet_mesto := 0;
  OPEN klienti;
  LOOP
    FETCH klienti into zaznam;
    EXIT WHEN klienti%NOTFOUND;
      IF (TRIM(zaznam.mesto) = mesto)
        THEN
          pocet_mesto := pocet_mesto + 1;
      END IF;

      IF (zaznam.mesto IS NOT NULL)
        THEN
          pocet_vsetkych := pocet_vsetkych + 1;
      END IF;
  END LOOP;
  CLOSE klienti;
    dbms_output.put_line('Celkovo ma hotel ' || pocet_vsetkych || ' klientov, klientov z mesta ' || mesto || ' je celkovo ' ||  pocet_mesto || ', percentualne zastupenie brnenskych klientov voci vsetkym ostatnym klientom je ' || pocet_mesto * 100 / pocet_vsetkych || ' percent');
  EXCEPTION
  WHEN ZERO_DIVIDE THEN
    dbms_output.put_line('Hotel nema ziadnych klientov.');
  WHEN OTHERS THEN
    raise_application_error(-20005, 'Nastala chyba pri hladani klientov a miest ich bydliska.');
END;
/

CREATE OR REPLACE PROCEDURE kontrola_emailov_zamestnancov
IS
   CURSOR zamestnanci IS SELECT * FROM zamestnanec;
   zaznam zamestnanci%ROWTYPE;
BEGIN
  OPEN zamestnanci;
  LOOP
    FETCH zamestnanci into zaznam;
    EXIT WHEN zamestnanci%NOTFOUND;
      IF (zaznam.email NOT LIKE '%@%.%')
        THEN
          dbms_output.put_line('Zamestnanec ' || zaznam.meno || ' ' || zaznam.priezvisko || ' uviedol nasledovnu neplatnu emailovu adresu: ' || zaznam.email);
      END IF;
  END LOOP;
  CLOSE zamestnanci;
  EXCEPTION
  WHEN OTHERS THEN
    raise_application_error(-20006, 'Nastala chyba pri kontrole emailovych adries.');
END;
/

CREATE OR REPLACE PROCEDURE volne_izby_podla_kapacity
IS
   CURSOR izby IS SELECT * FROM izba;
   zaznam izby%ROWTYPE;
   kapacita_jedna NUMBER;
   kapacita_dva NUMBER;
   kapacita_tri NUMBER;
   kapacita_styri NUMBER;
BEGIN
  kapacita_jedna := 0;
  kapacita_dva := 0;
  kapacita_tri := 0;
  kapacita_styri := 0;
  OPEN izby;
  LOOP
    FETCH izby into zaznam;
    EXIT WHEN izby%NOTFOUND;
      IF (zaznam.dostupnost = 0)
        THEN
          CONTINUE;
      END IF;

      IF (zaznam.kapacita = 1)
        THEN
          kapacita_jedna := kapacita_jedna + 1;
      END IF;

      IF (zaznam.kapacita = 2)
        THEN
          kapacita_dva := kapacita_dva + 1;
      END IF;

      IF (zaznam.kapacita = 3)
        THEN
          kapacita_tri := kapacita_tri + 1;
      END IF;

      IF (zaznam.kapacita = 4)
        THEN
          kapacita_styri := kapacita_styri + 1;
      END IF;
  END LOOP;
  CLOSE izby;
    dbms_output.put_line('Pocet izieb s kapacitou 1: ' || kapacita_jedna);
    dbms_output.put_line('Pocet izieb s kapacitou 2: ' || kapacita_dva);
    dbms_output.put_line('Pocet izieb s kapacitou 3: ' || kapacita_tri);
    dbms_output.put_line('Pocet izieb s kapacitou 4: ' || kapacita_styri);
  EXCEPTION
  WHEN OTHERS THEN
    raise_application_error(-20007, 'Nastala chyba pri vytvarani statistky o izbach a ich kapacitach');
END;
/

--- Zistit pocet klientov z mesta Praha, a vypisat ich zastupenie v porovnani zo vsetkymi
exec zastupenie_mesta_v_klientele('Praha');

--- Vloz zamestnanca z chybnou emailovou adresov -> test nasledujucej procedury
INSERT INTO zamestnanec(meno, priezvisko, titul, mesto, ulica, cislo_domu, psc, datum_narodenia, rodne_cislo, telefonne_cislo, email, cislo_uctu) VALUES('Marek','Dula', 'Ing.', 'Brno', 'Purkynova', 25, 60200, TO_TIMESTAMP('22-08-1988', 'DD-MM-YYYY'), 9708026124, '+420985677154', 'marek.dula@', 'CZ2145563556213524588641');
--- Kontrola validnej emailovej adresy
exec kontrola_emailov_zamestnancov();
--- Vypise kapacity izieb a pocet volnych izieb pre jednotlive kapacity
exec volne_izby_podla_kapacity();

--- Pridelenie prav xtotha01
GRANT ALL ON klient TO xtotha01;
GRANT ALL ON pobyt TO xtotha01;
GRANT ALL ON platba TO xtotha01;
GRANT ALL ON izba TO xtotha01;
GRANT ALL ON sluzba TO xtotha01;
GRANT ALL ON sluzba_izba TO xtotha01;
GRANT ALL ON sluzba_pobyt TO xtotha01;
GRANT ALL ON pobyt_izba TO xtotha01;

GRANT EXECUTE ON zastupenie_mesta_v_klientele TO xtotha01;
GRANT EXECUTE ON volne_izby_podla_kapacity TO xtotha01;

--- Index
EXPLAIN PLAN FOR SELECT K.meno, K.priezvisko, K.rodne_cislo, COUNT(P.suma)  FROM klient K NATURAL JOIN platba P WHERE P.suma BETWEEN 1000 AND 1500 GROUP BY K.meno, K.priezvisko, K.rodne_cislo;
SELECT plan_table_output FROM TABLE(dbms_xplan.display());

CREATE INDEX index_platba_suma ON platba(suma);

EXPLAIN PLAN FOR SELECT K.meno, K.priezvisko, K.rodne_cislo, COUNT(*)  FROM klient K NATURAL JOIN platba P WHERE P.suma BETWEEN 1000 AND 1500 GROUP BY K.meno, K.priezvisko, K.rodne_cislo;
SELECT plan_table_output FROM TABLE(dbms_xplan.display());

-- Materializovany pohlad

--- Pohlad pracujuci s tabulkami druheho clena timu
--- Druhy clen timu musi urobit:
--- DROP MATERIALIZED VIEW LOG ON klient;
--- DROP MATERIALIZED VIEW LOG ON pobyt;

--- CREATE MATERIALIZED VIEW LOG ON klient WITH PRIMARY KEY, ROWID;
--- CREATE MATERIALIZED VIEW LOG ON pobyt WITH PRIMARY KEY, ROWID;

--- GRANT ALL ON MLOG$_klient to xbolva00;
--- GRANT ALL ON MLOG$_pobyt to xbolva00;


CREATE MATERIALIZED VIEW pohlad_klient_pobyt
CACHE
BUILD IMMEDIATE
REFRESH FAST ON COMMIT
ENABLE QUERY REWRITE
AS SELECT rodne_cislo, datum_ubytovania_od, datum_ubytovania_do, klient.ROWID klient_row_id, pobyt.ROWID pobyt_row_id FROM xtotha01.klient NATURAL JOIN xtotha01.pobyt;

GRANT ALL ON pohlad_klient_pobyt TO xtotha01;

EXPLAIN PLAN FOR SELECT * FROM klient NATURAL JOIN pobyt;
SELECT plan_table_output FROM TABLE(dbms_xplan.display(NULL, NULL,'basic'));

ALTER SESSION SET query_rewrite_enabled = TRUE;
EXPLAIN PLAN FOR SELECT rodne_cislo, datum_ubytovania_od, datum_ubytovania_do, klient.ROWID klient_row_id, pobyt.ROWID pobyt_row_id FROM klient NATURAL JOIN pobyt;
SELECT plan_table_output FROM TABLE(dbms_xplan.display(NULL, NULL,'basic'));

--- Ukazka ako funguje materializovany pohlad
SELECT * FROM pohlad_klient_pobyt;
SELECT * FROM xtotha01.klient;
INSERT INTO xtotha01.klient(meno, priezvisko, mesto, ulica, cislo_domu, stat, psc, datum_narodenia, rodne_cislo, telefonne_cislo, email) VALUES('Ivana','Kovarova', 'Brno', 'Minska', 21, 'Ceska republika', 61600, TO_TIMESTAMP('27-06-1986', 'DD-MM-YYYY'), 8706276987, '+420156211147', 'ivanakovarova@gmail.com');
COMMIT; --- Aktualizia tabulky klient druheho clena timu
SELECT * from pohlad_klient_pobyt;
SELECT * FROM xtotha01.klient;
